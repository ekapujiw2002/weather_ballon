
kombat2014_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  0000011c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000080  00000000  00000000  00000870  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003dd  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000136  00000000  00000000  00000ccd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000032f  00000000  00000000  00000e03  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000034  00000000  00000000  00001134  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000e9  00000000  00000000  00001168  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000074  00000000  00000000  00001251  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 ec       	ldi	r30, 0xC8	; 200
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 36       	cpi	r26, 0x60	; 96
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	02 d0       	rcall	.+4      	; 0x5e <main>
  5a:	34 c0       	rjmp	.+104    	; 0xc4 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <main>:
//lib
#include <avr/io.h>
#include <util/crc16.h>

int main(void)
{
  5e:	cf 93       	push	r28
  60:	df 93       	push	r29
  62:	00 d0       	rcall	.+0      	; 0x64 <main+0x6>
  64:	00 d0       	rcall	.+0      	; 0x66 <main+0x8>
  66:	cd b7       	in	r28, 0x3d	; 61
  68:	de b7       	in	r29, 0x3e	; 62
	uint8_t buff[] = {'a','b','c','d'};
  6a:	81 e6       	ldi	r24, 0x61	; 97
  6c:	89 83       	std	Y+1, r24	; 0x01
  6e:	82 e6       	ldi	r24, 0x62	; 98
  70:	8a 83       	std	Y+2, r24	; 0x02
  72:	83 e6       	ldi	r24, 0x63	; 99
  74:	8b 83       	std	Y+3, r24	; 0x03
  76:	84 e6       	ldi	r24, 0x64	; 100
  78:	8c 83       	std	Y+4, r24	; 0x04
  7a:	fe 01       	movw	r30, r28
  7c:	31 96       	adiw	r30, 0x01	; 1

//lib
#include <avr/io.h>
#include <util/crc16.h>

int main(void)
  7e:	9e 01       	movw	r18, r28
  80:	2b 5f       	subi	r18, 0xFB	; 251
  82:	3f 4f       	sbci	r19, 0xFF	; 255
{
	uint8_t buff[] = {'a','b','c','d'};
	uint16_t crcx = 0, i=0, cx = 0;
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	90 e0       	ldi	r25, 0x00	; 0

	for (i=0;i<4;i++)
	{
		crcx = _crc16_update(crcx, buff[i]);
  88:	41 91       	ld	r20, Z+
_crc16_update(uint16_t __crc, uint8_t __data)
{
	uint8_t __tmp;
	uint16_t __ret;

	__asm__ __volatile__ (
  8a:	84 27       	eor	r24, r20
  8c:	48 2f       	mov	r20, r24
  8e:	42 95       	swap	r20
  90:	48 27       	eor	r20, r24
  92:	04 2e       	mov	r0, r20
  94:	46 95       	lsr	r20
  96:	46 95       	lsr	r20
  98:	40 25       	eor	r20, r0
  9a:	04 2e       	mov	r0, r20
  9c:	46 95       	lsr	r20
  9e:	40 25       	eor	r20, r0
  a0:	47 70       	andi	r20, 0x07	; 7
  a2:	08 2e       	mov	r0, r24
  a4:	89 2f       	mov	r24, r25
  a6:	46 95       	lsr	r20
  a8:	07 94       	ror	r0
  aa:	47 95       	ror	r20
  ac:	90 2d       	mov	r25, r0
  ae:	84 27       	eor	r24, r20
  b0:	06 94       	lsr	r0
  b2:	47 95       	ror	r20
  b4:	90 25       	eor	r25, r0
  b6:	84 27       	eor	r24, r20
int main(void)
{
	uint8_t buff[] = {'a','b','c','d'};
	uint16_t crcx = 0, i=0, cx = 0;

	for (i=0;i<4;i++)
  b8:	e2 17       	cp	r30, r18
  ba:	f3 07       	cpc	r31, r19
  bc:	29 f7       	brne	.-54     	; 0x88 <main+0x2a>
	{
		crcx = _crc16_update(crcx, buff[i]);
	}
	
	TCNT1 = crcx;
  be:	9d bd       	out	0x2d, r25	; 45
  c0:	8c bd       	out	0x2c, r24	; 44
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <main+0x64>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>
